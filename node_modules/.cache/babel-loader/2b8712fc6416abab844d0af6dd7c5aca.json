{"ast":null,"code":"import _objectSpread from \"/Users/macbookpro/tetrisbis/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/macbookpro/tetrisbis/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nimport { randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  return [player];\n};","map":{"version":3,"sources":["/Users/macbookpro/tetrisbis/src/hooks/usePlayer.js"],"names":["useState","randomTetromino","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACCF,QAAQ,CAAC;AACjCG,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAE;AAAV,KAD4B;AAEjCC,IAAAA,SAAS,EAAEL,eAAe,GAAGM,KAFI;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CADT;AAAA;AAAA,QACpBC,MADoB;AAAA,QACZC,SADY;;AAO3B,QAAMC,eAAe,GAAG,CAAC;AAACP,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOG,IAAAA;AAAP,GAAD,KAAsB;AAC1CE,IAAAA,SAAS,CAACE,IAAI,sBACPA,IADO;AAEVT,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAAnB;AAAuBC,QAAAA,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;AAAzC,OAFK;AAGVG,MAAAA;AAHU,MAAL,CAAT;AAKH,GAND;;AAQA,SAAO,CAACC,MAAD,CAAP;AACH,CAhBM","sourcesContent":["import { useState } from 'react';\n\nimport { randomTetromino } from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0},\n        tetromino: randomTetromino().shape,\n        collided: false,\n    });\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n    \n    return [player];\n}"]},"metadata":{},"sourceType":"module"}