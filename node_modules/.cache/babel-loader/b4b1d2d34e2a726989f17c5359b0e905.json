{"ast":null,"code":"import _slicedToArray from \"/Users/macbookpro/tetrisbis/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then Draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      });\n    };\n\n    setStage(prev => updateStage(prev));\n  }, []);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/macbookpro/tetrisbis/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAwB;AAAA,oBAClBL,QAAQ,CAACE,WAAW,EAAZ,CADU;AAAA;AAAA,QACrCI,KADqC;AAAA,QAC9BC,QAD8B;;AAI5CN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAC5BA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAoCA,IAArD,CADW,CAAjB,CAF+B,CAO7B;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACjCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAa;AACrB,cAAGD,KAAK,KAAK,CAAb,EAAe;AACXP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,YAExCb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA4B,OAFY,EAA/C;AAIH;AACJ,SAPD;AAQH,OATD;AAWH,KAnBD;;AAoBAb,IAAAA,QAAQ,CAACc,IAAI,IAAIb,WAAW,CAACa,IAAD,CAApB,CAAR;AACH,GAtBQ,EAsBP,EAtBO,CAAT;AAuBA,SAAO,CAACf,KAAD,EAAQC,QAAR,CAAP;AACH,CA5BM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) =>{\n    const [stage, setStage] = useState(createStage());\n\n\n    useEffect(() => {\n        const updateStage = prevStage => {\n          // First flush the stage\n          const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear']: cell)),\n            );  \n            \n\n            // Then Draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) =>{\n                    if(value !== 0){\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged': 'clear'}`,\n                        ];\n                    }\n                });\n            });\n\n        }\n        setStage(prev => updateStage(prev))\n    },[]);\n    return [stage, setStage];\n}"]},"metadata":{},"sourceType":"module"}